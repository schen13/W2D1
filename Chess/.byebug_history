q
@board.valid_pos?(
s
c
s
@board[new_pos].is_a?(Piece)
s
display @board[new_pos].color
display self.color
s
n
display dy
display dx
display moves
n
display new_pos
display self.pos
c
q
s
n
display dy
display dx
c
n
display moves
n
s
display new_pos
display self.pos
c
q
 q
c
n
c
n
display @board[start_pos].moves
q
display @board[start_pos].moves
display @board[start_pos].class
q
@board[start_pos].moves
c
s
display @board[start_pos]
c
q
s
sa
c
n
s
display self.pos
display new_pos
c
display new_pos
c
display self.pos
c
q
c
display self.pos
q
display self.pos
c
q
quit
display self.pos
c
q
n
s
display new_pos
display moves
n
c
q
[[0, 0]]
n
s
c
q
c
q
s
n
s
display horizontal_moves
s
display self.pos
display dy
display dx
display new_pos
display moves
q
display dx
display self.pos
display new_pos
s
q
n
s
q
s
display self.pos[0]
s
c
s
n
s
display pos
s
display end_pos
s
undisp 2
display @board[start_pos]
n
s
n
s
display start_pos
c
s
c
cd
c
s
display horizontal_moves
n
s
display new_pos
display moves
s
q
n
s
n
s
display new_pos
display moves
c
n
s
n
s
display self.pos
display new_pos
display moves
q
c
display moves
s
quit
c
quit
display @board[self.pos].is_a?(NullPiece)
display @board[self.pos].is_a?(Piece)
display self.pos
display @board[self.pos]
s
display new_pos
s
display dy
display dx
display self.pos
quit
y
q
board = Board.new(Board.test_grid)
load 'display.rb'
load 'board.rb'
load 'rook.rb'
load 'sliding_piece.rb'
load 'piece.rb'
c
q
board = Board.new(Board.test_grid)
load 'display.rb'
load 'board.rb'
load 'rook.rb'
load 'sliding_piece.rb'
load 'piece.rb'
s
c
n
s
display @board[new_pos]
s
undisp 5
display @board
display new_pos
display self.pos
display dy
display dx
c
n
s
